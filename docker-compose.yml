version: "1"

services:
  # PostgreSQL database service configuration
  db:
    restart: always  # Ensures the container always restarts if it stops
    image: postgres  # Uses the official PostgreSQL Docker image
    container_name: mlflow_db  # Custom name for the container
    expose:
      - "${PG_PORT}"  # Exposes PostgreSQL port to linked services, not to the host
    networks:
      - backend  # Connects to the backend network
    environment:
      - POSTGRES_USER=${PG_USER}  # PostgreSQL user
      - POSTGRES_PASSWORD=${PG_PASSWORD}  # PostgreSQL password
      - POSTGRES_DATABASE=${PG_DATABASE}  # Database name
    volumes:
      - ./db_data:/var/lib/postgresql/data/  # Mounts the volume for persistent database storage
    healthcheck:
      test: ["CMD", "pg_isready", "-p", "${PG_PORT}", "-U", "${PG_USER}"]  # Health check to ensure PostgreSQL is ready
      interval: 5s
      timeout: 5s
      retries: 3
  
  # MinIO S3 compatible storage service
  s3:
    restart: always
    image: minio/minio
    container_name: mlflow_minio
    volumes:
      - ./minio_data:/data  # Data volume for MinIO storage
    ports:
      - "${MINIO_PORT}:9000"  # Port mapping for MinIO API
      - "${MINIO_CONSOLE_PORT}:9001"  # Port mapping for MinIO Console
    networks:
      - frontend  # Connects to both frontend and backend networks
      - backend
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_ADDRESS=${MINIO_ADDRESS}
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_STORAGE_USE_HTTPS=${MINIO_STORAGE_USE_HTTPS}
      - MINIO_CONSOLE_ADDRESS=${MINIO_CONSOLE_ADDRESS}
    command: server /data  # Command to start MinIO server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
  
  # Service to create buckets in MinIO using MinIO Client
  create_buckets:
    image: minio/mc
    container_name: mlflow_create_buckets
    depends_on:
      - s3  # Depends on the MinIO service being available
    networks:
      - backend
    entrypoint: >
      /bin/sh -c '
      sleep 5;  # Waits for 5 seconds before executing the next commands
      /usr/bin/mc config host add s3 http://s3:${MINIO_PORT} ${MINIO_ACCESS_KEY} ${MINIO_SECRET_ACCESS_KEY} --api S3v4;
      [[ ! -z "`/usr/bin/mc ls s3 | grep challenge`" ]] || /usr/bin/mc mb s3/${MLFLOW_BUCKET_NAME};
      /usr/bin/mc policy download s3/${MLFLOW_BUCKET_NAME};
      exit 0;
      '

  # MLflow tracking server configuration
  tracking_server:
    restart: always
    build: ./mlflow  # Builds the MLflow Docker image from the local directory
    image: mlflow_server
    container_name: mlflow_server
    depends_on:
      - db  # Depends on the PostgreSQL database
    ports:
      - "${MLFLOW_PORT}:5000"  # Exposes MLflow port for access
    networks:
      - frontend
      - backend
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_ACCESS_KEY}
      - MLFLOW_S3_ENDPOINT_URL=http://s3:${MINIO_PORT}
      - MLFLOW_S3_IGNORE_TLS=true
    command: >
      mlflow server
      --backend-store-uri postgresql://${PG_USER}:${PG_PASSWORD}@db:${PG_PORT}/${PG_DATABASE}
      --host 0.0.0.0
      --serve-artifacts
      --artifacts-destination s3://${MLFLOW_BUCKET_NAME}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${MLFLOW_PORT}/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optuna dashboard service configuration
  optuna_dashboard:
    image: ghcr.io/optuna/optuna-dashboard:latest  # Uses the latest Optuna dashboard image from GitHub Container Registry
    container_name: optuna_dashboard
    depends_on:
      - db  # Depends on the PostgreSQL service
    ports:
      - "8080:8080"  # Exposes port 8080 for dashboard access
    environment:
      OPTUNA_DASHBOARD_DATABASE_URL: postgresql://${PG_USER}:${PG_PASSWORD}@db:${PG_PORT}/${PG_DATABASE}  # Database URL for Optuna
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  db_data:
  minio_data:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
